cv1
plot(1:20,cv1)
cv1[2]
plot(x=1:20,y=cv1)
plot(c(1:20),cv1)
mode(cv1)
typeof(cv1)
plot(1:20,1:20)
plot(1:20,1:20)
plot(1:20,1:20)
x <- c(-0.289,  0.054, -1.946, -1.810, -1.611, 1.114,  1.997,  1.602, -1.063, -0.443, -1.379, -1.324, -1.274, -0.741,  0.962, 0.4866,  0.530,  0.575,  0.285, -1.622, 1.072, 0.086, -1.382, 0.213, 1.208, 0.358, 1.946, -1.115, -1.308, -0.613, -1.253, 0.615, -1.432,  0.361, 0.319, -0.269, -0.756, 1.487,  0.421, -0.599)
y <-c(1.515, -0.514, -3.367, -1.216,  1.653, -3.682, 4.734, -1.093,  4.436, 2.459, 2.679,  3.282, 4.238,  2.984, -3.330, -2.251, -3.256, -3.454, -1.474, 1.461, -4.461, -1.603,  3.069, -2.293, -3.747, -1.929, 2.522,  3.071,  2.908,  3.788, 4.154, -3.195,  2.822, -1.969, -2.304, 1.906, 3.11, -2.620, -2.861,  3.077)
x_mat <- rep(1,40)
for (i in 1:19){
x_mat<-cbind(x_mat,x^i)
}
colnames(x_mat) <- 1:20
data_cv <- data.frame(y,x_mat)
cv1 <- c()
for (i in 1:20){
r <- c()
for (j in 1:40){
data1 <- data_cv[-j,1:(i+1)]
lm0 <- lm(y~.,data=data1)
r[j] <- (data_cv[j,1]-predict(lm0,data_cv[j,1:(i+1)]))^2
}
cv1[i] <- mean(r,na.rm=T)
}
cv1
plot(c(1:20),cv1)
plot(1:20,1:20)
x_mat <- rep(1,40)
for (i in 1:19){
x_mat<-cbind(x_mat,x^i)
}
colnames(x_mat) <- 1:20
data_cv <- data.frame(y,x_mat)
cv1 <- c()
for (i in 1:20){
r <- c()
for (j in 1:40){
data1 <- data_cv[-j,1:(i+1)]
lm0 <- lm(y~.,data=data1)
r[j] <- (data_cv[j,1]-predict(lm0,data_cv[j,1:(i+1)]))^2
}
cv1[i] <- mean(r,na.rm=T)
}
cv1
plot(c(1:20),cv1)
x_mat <- rep(1,40)
for (i in 1:19){
x_mat<-cbind(x_mat,x^i)
}
solve((t(x_mat) %*% x_mat))
cv1
i=20
data1 <- data_cv[-j,1:(i+1)]
j=1
data1 <- data_cv[-j,1:(i+1)]
data1
lm0 <- lm(y~.,data=data1)
lm0
r[j] <- (data_cv[j,1]-predict(lm0,data_cv[j,1:(i+1)]))^2
r[1]
for (j in 1:40){
data1 <- data_cv[-j,1:(i+1)]
lm0 <- lm(y~.,data=data1)
r[j] <- (data_cv[j,1]-predict(lm0,data_cv[j,1:(i+1)]))^2
}
r
j=3
data1 <- data_cv[-j,1:(i+1)]
data1
lm0 <- lm(y~.,data=data1)
lm0
data_cv[j,1]
predict(lm0,data_cv[j,1:(i+1)])
data_cv[j,1:(i+1)]
qt(4/3)
qt(4/3,16)
pt(4/3,16)
a<-pt(4/3,16)
2*(1-a)
m=8
n=6
a<-1:5
sd(a)
sd(a)^2
x <- c(1.23,1.42,1.41,1.62,1.55,1.51,1.6,1.76)
y <- c(1.76,1.41,1.87,1.49,1.67,1.81)
mean(x)
mean(y)
sm<-sd(x)^2*7
sn <- sd(y)^2*5
u <- sqrt(m+n-2)*(mean(x)-mean(y))/sqrt(1/m+1/n)/sqrt(sm+sn)
u
m+n-2
qt(0.9,12)
qf(0.95.15.9)
qf(0.95,15,9)
122/45/(39.6/9)
??chisquare
pchisq(27.51,4)
1-pchisq(27.51,4)
1-pchisq(3.609,3)
1-pchisq(11.21,2)
1-pchisq(11.21,4)
1-pchisq(1.211,1)
1-pchisq(1.211,3)
1-pchisq(0.91,1)
op <- par()
op
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
plot(1:10,1:10)
par(op)
plot(1:10,1:10)
a <- matrix(c(1,2,2,4),col=2)
?matrix
a <- matrix(c(1,2,2,4),ncol=2)
a <- matrix(c(1,2,2,4),ncol=2)
a
b <- matrix(c(1,3,2,4),ncol=2)
b
a %*% b
a+b
rank(a)
r(a)
eigen(a)
det(a)
det(b)
x<-c(2,1)
x%*%a%*%x
x%*%t(x)
t(x)%*%x
sqrt(8^2+15^2)
1/3*(-4)^3-1/2*16+24+27/2
1/3*4^3-1/2*16-24+27/2
1/3*(-2)^3-1/2*(-2)^2+12+27/2
8.166667*3
8.16666666667*6
49/6
2.8333333*3
2.833333*6
20.8333333*6
-0.25*log(0.25)-0.75*log(0.75)
-0.5*log(0.5)*2
1/3*3^3-1/2*3^2-6*3+27/2
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
print(R.version)
knit_with_parameters('~/Documents/Michelle/Columbia stat/ads/Tutorial2/doc/wk2-Tutorial-TextMining.Rmd')
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rmarkdown")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
readmission <-read.csv(file="../data/readmission_cleaning.csv", as.is=T)
readmission <- readmission[,-1]
library(plyr)
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
high_score <- ddply(readmission,.(Measure.Name),maxscore)
View(high_score)
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
df <- measure.df[index,-9])
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
df <- measure.df[index,-9]
return(df)
}
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
high_score <- ddply(readmission,.(Measure.Name),maxscore)
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
maxscore <- function(measure.df){
index <- which.max(measure.df$Score)
#return(measure.df[index,-9])
}
max_score <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
high_score <- ddply(readmission,.(Measure.Name),max_score)
datatable(high_score)
max_score <- function(measure.df){
index <- which.max(measure.df$Score)
return(measure.df[index,-9])
}
high_score <- ddply(readmission,.(Measure.Name),max_score) #data frame of the hospital which has the highest score for each measurement name
datatable(high_score)
length(readmission[readmission$State=="AL" & readmission$Measure.ID=="MORT_30_AMI"])
nrow(readmission[readmission$State=="AL" & readmission$Measure.ID=="MORT_30_AMI",])
AL_measure1 <- readmission[readmission$State=="AL" & readmission$Measure.ID=="MORT_30_AMI"]
AL_measure1 <- readmission[readmission$State=="AL" & readmission$Measure.ID=="MORT_30_AMI",]
datatable(AL_measure1)
AL_measure1 <- AL_measure1[order(AL_measure1$Score),]
datatable(AL_measure1)
View(AL_measure1)
AL_measure1 <- AL_measure1[order(AL_measure1$Score,decreasing=T),]
datatable(AL_measure1)
View(AL_measure1)
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
View(readmission)
readmission1=
readmission%>%
filter(ZIP.Code>0)%>%
mutate(region=as.character(ZIP.Code))
count.df=readmission1%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=readmission1%>%
group_by(c(region,Provider.ID)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
count.df=readmission1%>%
group_by(c(region,Provider.ID)%>%
summarise(
value=n()
)
count.df=readmission1%>%
count.df=readmission1%>%
group_by(c(region,Provider.ID))%>%
summarise(
value=n()
)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
library(ggplot2)
library(plotly)
install.packages(plotly)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(ggplot2)
library(plotly)
library(dplyr)
library(choroplethrZip)
library(readr)
install.packages("readr")
library(ggplot2)
library(plotly)
library(dplyr)
library(choroplethrZip)
library(readr)
library(stringr)
charge$Total_charges<-charge$total_discharges*charge$average_covered_charges
library(dtplyr)
library(dplyr)
library(plyr)
library(ggplot2)
library(maps)
readmission <-read.csv(file="D:/Spr2017-proj2-grp6/data/readmission_cleaning.csv", as.is=T)
readmission <-read.csv(file="../data/readmission_cleaning.csv", as.is=T)
readmission <- readmission[,-1]
MORT_30_AMI <- readmission[ readmission$Measure.Name=="Acute Myocardial Infarction (AMI) 30-Day Mortality Rate",]
MORT_30_AMI <- MORT_30_AMI[order(MORT_30_AMI$Score,decreasing=T),]
hist(MORT_30_AMI[,13],main = "Acute Myocardial Infarction (AMI) 30-Day Mortality Rate")
MORT_30_CABG <- readmission[ readmission$Measure.Name=="Death rate for CABG",]
MORT_30_CABG <- MORT_30_CABG[order(MORT_30_CABG$Score,decreasing=T),]
hist(MORT_30_CABG[,13],main = "Death rate for CABG")
MORT_30_COPD <- readmission[ readmission$Measure.Name=="Death rate for chronic obstructive pulmonary disease (COPD) patients",]
MORT_30_COPD <- MORT_30_COPD[order(MORT_30_COPD$Score,decreasing=T),]
hist(MORT_30_COPD[,13],main = "Death rate for chronic obstructive pulmonary disease (COPD) patients")
MORT_30_HF <- readmission[ readmission$Measure.Name=="Death rate for CABG",]
MORT_30_HF <- MORT_30_HF[order(MORT_30_HF$Score,decreasing=T),]
hist(MORT_30_HF[,13],main = "Death rate for CABG")
MORT_30_PN <- readmission[ readmission$Measure.Name=="Pneumonia (PN) 30-Day Mortality Rate",]
MORT_30_PN <- MORT_30_PN[order(MORT_30_PN$Score,decreasing=T),]
hist(MORT_30_PN[,13],main = "Pneumonia (PN) 30-Day Mortality Rate")
MORT_30_STK <- readmission[ readmission$Measure.Name=="Death rate for stroke patients",]
MORT_30_STK <- MORT_30_STK[order(MORT_30_STK$Score,decreasing=T),]
hist(MORT_30_STK[,13],main = "Death rate for stroke patients")
READM_30_AMI <- readmission[ readmission$Measure.Name=="Acute Myocardial Infarction (AMI) 30-Day Readmission Rate",]
READM_30_AMI <- READM_30_AMI[order(READM_30_AMI$Score,decreasing=T),]
hist(READM_30_AMI[,13],main = "Acute Myocardial Infarction (AMI) 30-Day Readmission Rate")
READM_30_CABG <- readmission[ readmission$Measure.Name=="Rate of readmission for CABG",]
READM_30_CABG <- READM_30_CABG[order(READM_30_CABG$Score,decreasing=T),]
hist(READM_30_CABG[,13],main = "Rate of readmission for CABG")
READM_30_COPD <- readmission[ readmission$Measure.Name=="Rate of readmission for chronic obstructive pulmonary disease (COPD) patients",]
READM_30_COPD <- READM_30_COPD[order(READM_30_CABG$Score,decreasing=T),]
hist(READM_30_COPD[,13],main = "Rate of readmission for chronic obstructive pulmonary disease (COPD) patients")
READM_30_HF <- readmission[ readmission$Measure.Name=="Heart failure (HF) 30-Day Readmission Rate",]
READM_30_HF <- READM_30_HF[order(READM_30_HF$Score,decreasing=T),]
hist(READM_30_HF[,13],main = "Heart failure (HF) 30-Day Readmission Rate")
READM_30_HIP_KNEE <- readmission[ readmission$Measure.Name=="Rate of readmission after hip/knee replacement",]
READM_30_HIP_KNEE <- READM_30_HIP_KNEE[order(READM_30_HIP_KNEE$Score,decreasing=T),]
hist(READM_30_HIP_KNEE[,13],main = "Rate of readmission after hip/knee replacement")
READM_30_HOSP_WIDE <- readmission[ readmission$Measure.Name=="Rate of readmission after discharge from hospital (hospital-wide)",]
READM_30_HOSP_WIDE <- READM_30_HOSP_WIDE[order(READM_30_HOSP_WIDE$Score,decreasing=T),]
hist(READM_30_HOSP_WIDE[,13],main = "Rate of readmission after discharge from hospital (hospital-wide)")
READM_30_PN <- readmission[ readmission$Measure.Name=="Pneumonia (PN) 30-Day Readmission Rate",]
READM_30_PN <- READM_30_PN[order(READM_30_PN$Score,decreasing=T),]
hist(READM_30_PN[,13],main = "Pneumonia (PN) 30-Day Readmission Rate")
READM_30_STK <- readmission[ readmission$Measure.Name=="Rate of readmission for stroke patients",]
READM_30_STK <- READM_30_STK[order(READM_30_STK$Score,decreasing=T),]
hist(READM_30_STK[,13],main = "Rate of readmission for stroke patients")
library(ggplot2)
library(plotly)
library(dplyr)
library(choroplethrZip)
library(readr)
library(stringr)
load("../output/Select Readmission Data.RData")
load("../output/charge.Rda")
charge$Total_charges<-charge$total_discharges*charge$average_covered_charges
total_charge_hos<-tapply(charge$Total_charges,charge$provider_id,sum)
hospital_info<-charge[,2:8]
hospital_info<-hospital_info[!duplicated(hospital_info),]
hospital_info$Charge<-total_charge_hos
west<-c("WA","OR","MT","ID","WY","CA","NV","UT","CO","AZ","NM","AK","HI")
midwest<-c("ND","MN","SD","NE","IA","KS","MO","WI","IL","MI","IN","OH")
northeast<-c("NY","PA","NJ","CT","MA","RI","VT","NH","ME")
south<-c("TX","OK","AR","LA","MS","MS","AL","TN","KY","WV","MD","DC","DE","VA","NC",
"SC","GA","FL")
hospital_info$hospital_region<-rep(NA,nrow(hospital_info))
hospital_info$hospital_region[hospital_info$provider_state %in% west]<-"west"
hospital_info$hospital_region[hospital_info$provider_state %in% midwest]<-"midwest"
hospital_info$hospital_region[hospital_info$provider_state %in% northeast]<-"northeast"
hospital_info$hospital_region[hospital_info$provider_state %in% south]<-"south"
p1 <- plot_ly(hospital_info[hospital_info$hospital_region == "west",], x = ~Charge, color = ~provider_state, type = "box")
p1
p2 <- plot_ly(hospital_info[hospital_info$hospital_region == "midwest",], x = ~Charge, color = ~provider_state, type = "box")
p2
p3 <- plot_ly(hospital_info[hospital_info$hospital_region == "northeast",], x = ~Charge, color = ~provider_state, type = "box")
p3
p4 <- plot_ly(hospital_info[hospital_info$hospital_region == "south",], x = ~Charge, color = ~provider_state, type = "box")
p4
View(charge)
View(hospital_info)
readmission1 <- readmission[,c(1:9,13)]
readmission1$Score[readmission1$Score=="Not Available"]<-0
select<-readmission1 %>%
filter(Measure.Name %in% unique(readmission1$Measure.Name)[7:14]) %>%
group_by(Measure.Name, provider_state) %>%
filter(Score==max(Score))
measure<-unique(select$Measure.Name)
select$Measure.Name[select$Measure.Name==measure[1]]<-"chronic obstructive pulmonary disease (COPD) patients"
select$Measure.Name[select$Measure.Name==measure[2]]<-"stroke patients"
select$Measure.Name[select$Measure.Name==measure[3]]<-"Heart failure (HF)"
select$Measure.Name[select$Measure.Name==measure[4]]<-"hip/knee replacement"
select$Measure.Name[select$Measure.Name==measure[5]]<-"Acute Myocardial Infarction (AMI)"
select$Measure.Name[select$Measure.Name==measure[6]]<-"CABG"
select$Measure.Name[select$Measure.Name==measure[7]]<-"hospital-wide"
select$Measure.Name[select$Measure.Name==measure[8]]<-"Pneumonia (PN)"
select$Score<- as.numeric(select$Score)
select$Score<-select$Score^3
library(plotly)
select$info<-with(select,paste(provider_name, "<br>", provider_street_address,"<br>",provider_city, "<br>", County.Name))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(select[select$Measure.Name=="CABG",], locationmode = 'USA-states') %>%
add_trace(
z = ~Score,text = ~info, locations = ~provider_state,
color = ~Score, colors = 'Oranges'
) %>%
layout(
title = 'Hospital Selection',
geo = g
)
data1 <- readmission1
data1$Score<- as.numeric(data1$Score)
data1<-arrange(data1, desc(Score))
shiny::runApp('~/Documents/Spr2017-proj2-grp6/app/Xuanzi/shiny app xuanzi')
View(select)
View(readmission)
unique(readmission$Measure.Name)
View(readmission1)
