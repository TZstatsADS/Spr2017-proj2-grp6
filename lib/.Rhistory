valid_zips <- zip.regions %>%
filter(state.name %in% "massachusetts") %>%
select(region)
zip_spending <- hcd %>%
filter(provider_zip_code %in% valid_zips$region) %>%
select(provider_zip_code,total_discharges,average_medicare_payments) %>%
ddply(.(provider_zip_code),summarise,medicare_reimbursements = sum(total_discharges*average_medicare_payments))
colnames(zip_spending) <- c("region","value")
zip_choropleth(zip_spending, title="Total Medicare Reimbursements by Zip", state_zoom = "massachusetts")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=count()
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=count(n)
)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
View(mh2009)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=nrow(SALE.PRICE>100000)
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=nrow(SALE.PRICE)
)
save(count.df, file="../output/count.RData")
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=sum(SALE.PRICE)
)
save(count.df, file="../output/count.RData")
View(count.df)
data("state.regions")
data("state.regions")
View(state.regions)
?state_choropleth
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
hospital_charges <- hcd %>%
select(drg_definition, provider_id, total_discharges, average_covered_charges) %>%
mutate(charge_total = total_discharges*average_covered_charges) %>%
group_by(provider_id) %>%
summarise(provider_gross_charges = sum(charge_total))
top_hospitals_billing <- hcd %>%
select(provider_id, total_discharges, average_covered_charges) %>%
ddply(.(provider_id), summarise, total_charges = sum(total_discharges*average_covered_charges)) %>%
top_n(20)
top_billing_procedures <- hcd %>%
select(drg_code,total_discharges,provider_id,average_covered_charges) %>%
ddply(.(drg_code), summarise, total_charges = sum(total_discharges*average_covered_charges)) %>%
top_n(20)
top_hosp_proc <- hcd %>%
filter(provider_id %in% top_hospitals_billing$provider_id &
drg_code %in% top_billing_procedures$drg_code) %>%
ddply(.(provider_id,drg_code), summarise, total_charges = sum(total_discharges*average_covered_charges))
desc <- hcd %>%
select(provider_name, provider_id, drg_definition, drg_code) %>%
distinct()
hm <- left_join(top_hosp_proc,desc)
library(ggplot2)
ggplot(data = hm, aes(x = provider_name, y = drg_definition)) +
geom_tile(aes(fill = total_charges)) +
scale_fill_gradient2(low="darkblue", high="darkgreen", guide="colorbar") +
theme(axis.text.x = element_text(angle = -90, hjust = 0))
View(hcd)
state_query <- c("ma","ny","ct","vt")
drg_query <- c("247")
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_covered = sum(total_discharges*average_covered_charges)/sum(total_discharges)) %>%
select(state_name,avg_covered)
View(out)
procedureCostState <- function(hcd_df, state_list, drg_code){
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_covered = sum(total_discharges*average_covered_charges)/sum(total_discharges)) %>%
select(state_name,avg_covered)
return(out)
}
out<-procedureCostState(hcd,state_query,drg_query)
state_query <- c("ma","ny","ct","vt","nj")
procedureCostState <- function(hcd_df, state_list, drg_code){
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_covered = sum(total_discharges*average_covered_charges)/sum(total_discharges)) %>%
select(state_name,avg_covered)
return(out)
}
out<-procedureCostState(hcd,state_query,drg_query)
View(out)
state_query <- unique(hcd$state_name)
out<-procedureCostState(hcd,state_query,drg_query)
View(out)
View(hm)
data("zip.regions")
View(zip.regions)
data(state.regions)
View(state.regions)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
View(hcd)
state_query <- c("ma","ny","ct","vt","nj")
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_medicare_payments = sum(total_discharges*average_medicare_payments)/sum(total_discharges)) %>%
select(state_name,avg_covered)
state_query <- c("ma","ny","ct","vt","nj")
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_medicare_pmt = sum(total_discharges*average_medicare_payments)/sum(total_discharges)) %>%
select(state_name,avg_medicare_pmt)
View(out)
state_query <- c("ma","ny","ct","vt","nj")
out <- hcd %>%
filter(state_name %in% state_query & drg_code %in% drg_query) %>%
ddply(.(state_name), summarise, avg_medicare_pmt = sum(total_discharges*average_medicare_payments)) %>%
select(state_name,avg_medicare_pmt)
View(out)
state_query <- c("ma","ny","ct","vt","nj")
out <- hcd %>%
filter(state_name %in% state_query) %>%
ddply(.(state_name), summarise, avg_medicare_pmt = sum(total_discharges*average_medicare_payments)/sum(total_discharges)) %>%
select(state_name,avg_medicare_pmt)
View(out)
data("county.regions")
View(county.regions)
data("country.regions")
View(country.regions)
shiny::runApp('Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/doc/test_app_galen')
a<-"Create map showing average cost of a medical procedure averaged \
across all hospitals that receive Medicare Inpatient Prospective Payment System \
(IPPS) payments"
a
a<-"Create map showing average cost of a medical procedure averaged
across all hospitals that receive Medicare Inpatient Prospective Payment System
(IPPS) payments"
a
runApp('Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/doc/test_app_galen')
View(hcd)
?state_choropleth
data("df_pop_state")
View(df_pop_state)
View(state.regions)
View(out)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
out<- procedureCost(hcd,"091")
View(out)
data<- procedureCost(hcd,"091")
data <- procedureCost(hcd,drg)
states <- getStateInfoByAbbrev(data$states)
ij <- inner_join(data,states,by("state_name" = "state_short"))
states <- getStateInfoByAbbrev(data$state_name)
View(data)
states <- getStateInfoByAbbrev(data$state_name)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
states <- getStateInfoByAbbrev(data$state_name)
View(states)
ij <- inner_join(data,states,by("state_name" = "state_short"))
View(data)
data
ij <- inner_join(data,states,by("state_name" = "state_short"))
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
View(hcd)
data = procedureCost(hcd,"091")
View(data)
states <- getStateInfoByAbbrev(data$state_name)
ij <- inner_join(data,states,by("state_name" = "state_short"))
View(data)
ij <- inner_join(data,states,by = c("state_name" = "state_short"))
View(ij)
View(ij)
?state_choropleth
data("df_pop_state")
View(df_pop_state)
runApp('Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/doc/test_app_galen')
runApp('Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/doc/test_app_galen')
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
View(df_pop_state)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
source("../lib/hospital_data_utils.R")
source("../lib/mapping_region_utils.R")
source("../lib/cost_filtering_utils.R")
drg<-hcd$drg_definition[1]
plotDrgCode(data,drg)
runApp('Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/doc/test_app_galen')
getwd
getwd()
setwd("~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/lib")
?save
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
View(states)
?inner_join
hrd <- inner_join(hrd,states,by=c("state_name","state_short"))
hrd <- inner_join(hrd,states,by=c("state_name","state_short"))
View(states)
View(hcd)
View(hrd)
View(states)
write_rdb.R
write_rdb
ls()
getwd()
"write_rdb.R"
?run
exec("write_rdb.R")
eval("write_rdb.R")
eval(write_rdb.R)
write_rdb.R
save(hrd, file="../output/hrd.RData")
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
hcd <- inner_join(hcd,states,by=c("state_name","state_short"))
hrd <- inner_join(hrd,states,by=c("state_name","state_short"))
View(hcd)
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
hcd <- inner_join(hcd,states,by=c("state_name" = "state_short"))
hrd <- inner_join(hrd,states,by=c("state_name" = "state_short"))
save(hcd, file="../output/hcd.RData")
save(hrd, file="../output/hrd.RData")
data("../data/hcd.RData")
data("../data/hcd.RData")
getwd()
?data
load("../data/hcd.RData")
?selectInput
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
input
input$var
Q
?selectInput
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
View(hcd)
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
View(df)
input$var
View(df)
?state_choropleth
data("df_pop_state")
View(df_pop_state)
View(hcd)
save(hrd, file="../data/hrd.RData")
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
hcd <- inner_join(hcd,states,by=c("provider_state" = "state_short"))
hrd <- inner_join(hrd,states,by=c("provider_state" = "state_short"))
save(hcd, file="../data/hcd.RData")
save(hrd, file="../data/hrd.RData")
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
hcd <- inner_join(hcd,states,by=c("provider_state" = "state_short"))
hrd <- inner_join(hrd,states,by=c("provider_state" = "state_short"))
save(hcd, file="../data/hcd.RData")
save(hrd, file="../data/hrd.RData")
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$state_name)
hcd <- inner_join(hcd,states,by=c("provider_state" = "state_short"))
hrd <- inner_join(hrd,states,by=c("provider_state" = "state_short"))
save(hcd, file="../data/hcd.RData")
save(hrd, file="../data/hrd.RData")
library(dplyr)
source("hospital_data_utils.R")
source("mapping_region_utils.R")
hcd <- loadHospitalChargeData_CSV()
hrd <- loadHospitalReadmissionData_CSV()
states <- getStateInfoByAbbrev(hcd$provider_state)
hcd <- inner_join(hcd,states,by=c("provider_state" = "state_short"))
hrd <- inner_join(hrd,states,by=c("provider_state" = "state_short"))
save(hcd, file="../data/hcd.RData")
save(hrd, file="../data/hrd.RData")
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
getwd()
load("../data/hcd.RData")
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
data("df_county_demographics")
View(df_county_demographics)
data("state.regions")
View(state.regions)
data("counties.regions")
?county_choropleth
data("county.map")
View(county.map)
library(readr)
us_regions <- read_csv("~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/data/us_regions.csv",
col_names = FALSE)
View(us_regions)
colnames(us_regions)<-c("state_name","natl_region")
mutate(us_regions,state_name = tolower(state.name))
mutate(us_regions,state_name = tolower(state.name))
mutate(us_regions,state_name, state_name = tolower(state.name))
r <- us_regions %>%
mutate(state_name = tolower(state_name))
r
natl_regions<-r
save(natl_regions,"../data")
save(natl_regions,file="../data/natl_regions.RData")
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
getStatesFromRegion("New England & Mid Atlantic")
out <-getStatesFromRegion("New England & Mid Atlantic")
out
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
out <-getStatesFromRegion("New England & Mid Atlantic")
?as.list
getStatesFromRegion <- function(region_list){
out <- us_regions %>%
filter(natl_region %in% region_list) %>%
select(state_name)
return(as.list(out))
}
out <-getStatesFromRegion("New England & Mid Atlantic")
out
}
getStatesFromRegion <- function(region_list){
out <- us_regions %>%
filter(natl_region %in% region_list) %>%
select(state_name)
return(as.list(out$state_name))
}
getStatesFromRegion <- function(region_list){
out <- us_regions %>%
filter(natl_region %in% region_list) %>%
select(state_name)
return(as.list(out$state_name))
}
out <-getStatesFromRegion("New England & Mid Atlantic")
out
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
getStatesFromRegion <- function(region_list){
out <- us_regions %>%
filter(natl_region %in% region_list) %>%
select(state_name)
return(as.vector(out$state_name))
}
out <-getStatesFromRegion("New England & Mid Atlantic")
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
?c
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
out<-"new york"
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
out <-getStatesFromRegion("New England & Mid Atlantic")
View(r)
View(us_regions)
View(us_regions)
View(us_regions)
us_regions$state_name <- tolower(us_regions$state_name)
View(us_regions)
out <-getStatesFromRegion("New England & Mid Atlantic")
out
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
runApp('~/Google Drive/Applied Data Science Projects/Proj2/Spr2017-proj2-grp6/app')
View(natl_regions)
plotDrgCode(hcd,"061",natl_regions$natl_region[1])
data <- procedureCost(hcd,"061")
data <- procedureCost(hcd,hcd$drg_definition[1])
